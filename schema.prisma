// datasource db defines the database connection settings.
// It is configured for PostgreSQL and uses an environment variable for the connection URL.
// The 'extensions' feature enables the use of PostgreSQL-specific data types.
datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
}

// generator db configures Prisma Client settings.
// It is set up to use Prisma Client Python with asyncio interface and specific features.
generator db {
  provider             = "prisma-client-py"
  interface            = "asyncio"
  recursive_type_depth = 5
  previewFeatures      = ["postgresqlExtensions"]
}

model User {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  role      Role     @default(USER)

  Urls      Url[]
  ApiKeys   ApiKey[]
  Analytics Analytics[]
}

model Url {
  id          String    @id @default(dbgenerated("gen_random_uuid()"))
  originalUrl String
  shortUrl    String    @unique
  alias       String?
  expiresAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  userId      String

  User      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Analytics Analytics[]
}

model ApiKey {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  key       String   @unique
  createdAt DateTime @default(now())
  userId    String

  User User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Analytics {
  id        String   @id @default(dbgenerated("gen_random_uuid()"))
  urlId     String
  clicks    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Url    Url     @relation(fields: [urlId], references: [id], onDelete: Cascade)
  User   User?   @relation(fields: [userId], references: [id])
  userId String?
}

enum Role {
  ADMIN
  USER
  APICLIENT
}

